* intro
  Simple stack language - two stacks, in the environment, for every defined type.
* DSL
  id = { ... }     --> class with fields def
  id = :bag ...    --> bag def
  id = :string ... --> string def
  id = :map ...    --> map def
  id = | ...       --> or type def

  See dsl.lisp

* build
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ; rm -rf */*.fasl ; rm -rf */*~")
 (ql:quickload :stack-dsl/use)
#+end_src

#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ; rm -rf */*.fasl ; rm -rf */*~")
#+end_src
#+name: dsl
#+begin_src lisp :results output
 (ql:quickload :stack-dsl/test)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (stack-dsl::test)
#+end_src

#+RESULTS: dsl
#+begin_example
**** PASM (tracing T)
  into   stack-language accepted=(EMPTY "" 0 0) next=(SYMBOL "machineDescriptor" 1 1)
    into   rmSpaces accepted=(EMPTY "" 0 0) next=(SYMBOL "machineDescriptor" 1 1)
  back into stack-language accepted=(SYMBOL "machineDescriptor" 1 1) next=(SPACE " " 1 18)
    into   rmSpaces accepted=(SYMBOL "machineDescriptor" 1 1) next=(SPACE " " 1 18)
  back into stack-language accepted=(SYMBOL "machineDescriptor" 1 1) next=(SPACE " " 1 18)
    into   rmSpaces accepted=(SPACE " " 1 18) next=(CHARACTER #\= 1 19)
  back into stack-language accepted=(CHARACTER #\= 1 19) next=(SPACE " " 1 20)
    into   rmSpaces accepted=(CHARACTER #\= 1 19) next=(SPACE " " 1 20)
  back into stack-language accepted=(CHARACTER #\= 1 19) next=(SPACE " " 1 20)
    into   rmSpaces accepted=(SPACE " " 1 20) next=(CHARACTER #\{ 1 21)
  back into stack-language accepted=(CHARACTER #\{ 1 21) next=(SPACE " " 1 22)
    into   rmSpaces accepted=(CHARACTER #\{ 1 21) next=(SPACE " " 1 22)
  back into stack-language accepted=(CHARACTER #\{ 1 21) next=(SPACE " " 1 22)
    into   rmSpaces accepted=(SPACE " " 1 22) next=(SYMBOL "name" 1 23)
  back into stack-language accepted=(SYMBOL "name" 1 23) next=(SPACE " " 1 27)
    into   rmSpaces accepted=(SYMBOL "name" 1 23) next=(SPACE " " 1 27)
  back into stack-language accepted=(SYMBOL "name" 1 23) next=(SPACE " " 1 27)
    into   rmSpaces accepted=(SPACE " " 1 27) next=(SYMBOL "initiallyDescriptor" 1 28)
  back into stack-language accepted=(SYMBOL "initiallyDescriptor" 1 28) next=(SPACE " " 1 47)
    into   rmSpaces accepted=(SYMBOL "initiallyDescriptor" 1 28) next=(SPACE " " 1 47)
  back into stack-language accepted=(SYMBOL "initiallyDescriptor" 1 28) next=(SPACE " " 1 47)
    into   rmSpaces accepted=(SPACE " " 1 47) next=(SYMBOL "states" 1 48)
  back into stack-language accepted=(SYMBOL "states" 1 48) next=(SPACE " " 1 54)
    into   rmSpaces accepted=(SYMBOL "states" 1 48) next=(SPACE " " 1 54)
  back into stack-language accepted=(SYMBOL "states" 1 48) next=(SPACE " " 1 54)
    into   rmSpaces accepted=(SPACE " " 1 54) next=(CHARACTER #\} 1 55)
  back into stack-language accepted=(CHARACTER #\} 1 55) next=(SPACE "
" 1 56)
    into   rmSpaces accepted=(CHARACTER #\} 1 55) next=(SPACE "
" 1 56)
  back into stack-language accepted=(CHARACTER #\} 1 55) next=(SPACE "
" 1 56)
    into   rmSpaces accepted=(SPACE "
" 1 56) next=(SYMBOL "initiallyDescriptor" 2 1)
  back into stack-language accepted=(SYMBOL "initiallyDescriptor" 2 1) next=(SPACE " " 2 20)
    into   rmSpaces accepted=(SYMBOL "initiallyDescriptor" 2 1) next=(SPACE " " 2 20)
  back into stack-language accepted=(SYMBOL "initiallyDescriptor" 2 1) next=(SPACE " " 2 20)
    into   rmSpaces accepted=(SPACE " " 2 20) next=(CHARACTER #\= 2 21)
  back into stack-language accepted=(CHARACTER #\= 2 21) next=(SPACE " " 2 22)
    into   rmSpaces accepted=(CHARACTER #\= 2 21) next=(SPACE " " 2 22)
  back into stack-language accepted=(CHARACTER #\= 2 21) next=(SPACE " " 2 22)
    into   rmSpaces accepted=(SPACE " " 2 22) next=(CHARACTER #\: 2 23)
  back into stack-language accepted=(CHARACTER #\: 2 23) next=(SYMBOL "bag" 2 24)
    into   rmSpaces accepted=(CHARACTER #\: 2 23) next=(SYMBOL "bag" 2 24)
  back into stack-language accepted=(SYMBOL "bag" 2 24) next=(SPACE " " 2 27)
    into   rmSpaces accepted=(SYMBOL "bag" 2 24) next=(SPACE " " 2 27)
  back into stack-language accepted=(SYMBOL "bag" 2 24) next=(SPACE " " 2 27)
    into   rmSpaces accepted=(SPACE " " 2 27) next=(SYMBOL "statement" 2 28)
  back into stack-language accepted=(SYMBOL "statement" 2 28) next=(SPACE "
" 2 37)
    into   rmSpaces accepted=(SYMBOL "statement" 2 28) next=(SPACE "
" 2 37)
  back into stack-language accepted=(SYMBOL "statement" 2 28) next=(SPACE "
" 2 37)
    into   rmSpaces accepted=(SPACE "
" 2 37) next=(SYMBOL "statesBlock" 3 1)
  back into stack-language accepted=(SYMBOL "statesBlock" 3 1) next=(SPACE " " 3 12)
    into   rmSpaces accepted=(SYMBOL "statesBlock" 3 1) next=(SPACE " " 3 12)
  back into stack-language accepted=(SYMBOL "statesBlock" 3 1) next=(SPACE " " 3 12)
    into   rmSpaces accepted=(SPACE " " 3 12) next=(CHARACTER #\= 3 13)
  back into stack-language accepted=(CHARACTER #\= 3 13) next=(SPACE " " 3 14)
    into   rmSpaces accepted=(CHARACTER #\= 3 13) next=(SPACE " " 3 14)
  back into stack-language accepted=(CHARACTER #\= 3 13) next=(SPACE " " 3 14)
    into   rmSpaces accepted=(SPACE " " 3 14) next=(CHARACTER #\: 3 15)
  back into stack-language accepted=(CHARACTER #\: 3 15) next=(SYMBOL "bag" 3 16)
    into   rmSpaces accepted=(CHARACTER #\: 3 15) next=(SYMBOL "bag" 3 16)
  back into stack-language accepted=(SYMBOL "bag" 3 16) next=(SPACE " " 3 19)
    into   rmSpaces accepted=(SYMBOL "bag" 3 16) next=(SPACE " " 3 19)
  back into stack-language accepted=(SYMBOL "bag" 3 16) next=(SPACE " " 3 19)
    into   rmSpaces accepted=(SPACE " " 3 19) next=(SYMBOL "state" 3 20)
  back into stack-language accepted=(SYMBOL "state" 3 20) next=(SPACE "
" 3 25)
    into   rmSpaces accepted=(SYMBOL "state" 3 20) next=(SPACE "
" 3 25)
  back into stack-language accepted=(SYMBOL "state" 3 20) next=(SPACE "
" 3 25)
    into   rmSpaces accepted=(SPACE "
" 3 25) next=(SYMBOL "state" 4 1)
  back into stack-language accepted=(SYMBOL "state" 4 1) next=(SPACE " " 4 6)
    into   rmSpaces accepted=(SYMBOL "state" 4 1) next=(SPACE " " 4 6)
  back into stack-language accepted=(SYMBOL "state" 4 1) next=(SPACE " " 4 6)
    into   rmSpaces accepted=(SPACE " " 4 6) next=(CHARACTER #\= 4 7)
  back into stack-language accepted=(CHARACTER #\= 4 7) next=(SPACE " " 4 8)
    into   rmSpaces accepted=(CHARACTER #\= 4 7) next=(SPACE " " 4 8)
  back into stack-language accepted=(CHARACTER #\= 4 7) next=(SPACE " " 4 8)
    into   rmSpaces accepted=(SPACE " " 4 8) next=(CHARACTER #\{ 4 9)
  back into stack-language accepted=(CHARACTER #\{ 4 9) next=(SPACE " " 4 10)
    into   rmSpaces accepted=(CHARACTER #\{ 4 9) next=(SPACE " " 4 10)
  back into stack-language accepted=(CHARACTER #\{ 4 9) next=(SPACE " " 4 10)
    into   rmSpaces accepted=(SPACE " " 4 10) next=(SYMBOL "name" 4 11)
  back into stack-language accepted=(SYMBOL "name" 4 11) next=(SPACE " " 4 15)
    into   rmSpaces accepted=(SYMBOL "name" 4 11) next=(SPACE " " 4 15)
  back into stack-language accepted=(SYMBOL "name" 4 11) next=(SPACE " " 4 15)
    into   rmSpaces accepted=(SPACE " " 4 15) next=(SYMBOL "events" 4 16)
  back into stack-language accepted=(SYMBOL "events" 4 16) next=(SPACE " " 4 22)
    into   rmSpaces accepted=(SYMBOL "events" 4 16) next=(SPACE " " 4 22)
  back into stack-language accepted=(SYMBOL "events" 4 16) next=(SPACE " " 4 22)
    into   rmSpaces accepted=(SPACE " " 4 22) next=(CHARACTER #\} 4 23)
  back into stack-language accepted=(CHARACTER #\} 4 23) next=(SPACE "
" 4 24)
    into   rmSpaces accepted=(CHARACTER #\} 4 23) next=(SPACE "
" 4 24)
  back into stack-language accepted=(CHARACTER #\} 4 23) next=(SPACE "
" 4 24)
    into   rmSpaces accepted=(SPACE "
" 4 24) next=(SYMBOL "eventsBlock" 5 1)
  back into stack-language accepted=(SYMBOL "eventsBlock" 5 1) next=(SPACE " " 5 12)
    into   rmSpaces accepted=(SYMBOL "eventsBlock" 5 1) next=(SPACE " " 5 12)
  back into stack-language accepted=(SYMBOL "eventsBlock" 5 1) next=(SPACE " " 5 12)
    into   rmSpaces accepted=(SPACE " " 5 12) next=(CHARACTER #\= 5 13)
  back into stack-language accepted=(CHARACTER #\= 5 13) next=(SPACE " " 5 14)
    into   rmSpaces accepted=(CHARACTER #\= 5 13) next=(SPACE " " 5 14)
  back into stack-language accepted=(CHARACTER #\= 5 13) next=(SPACE " " 5 14)
    into   rmSpaces accepted=(SPACE " " 5 14) next=(CHARACTER #\: 5 15)
  back into stack-language accepted=(CHARACTER #\: 5 15) next=(SYMBOL "bag" 5 16)
    into   rmSpaces accepted=(CHARACTER #\: 5 15) next=(SYMBOL "bag" 5 16)
  back into stack-language accepted=(SYMBOL "bag" 5 16) next=(SPACE " " 5 19)
    into   rmSpaces accepted=(SYMBOL "bag" 5 16) next=(SPACE " " 5 19)
  back into stack-language accepted=(SYMBOL "bag" 5 16) next=(SPACE " " 5 19)
    into   rmSpaces accepted=(SPACE " " 5 19) next=(SYMBOL "event" 5 20)
  back into stack-language accepted=(SYMBOL "event" 5 20) next=(SPACE "
" 5 25)
    into   rmSpaces accepted=(SYMBOL "event" 5 20) next=(SPACE "
" 5 25)
  back into stack-language accepted=(SYMBOL "event" 5 20) next=(SPACE "
" 5 25)
    into   rmSpaces accepted=(SPACE "
" 5 25) next=(SYMBOL "event" 6 1)
  back into stack-language accepted=(SYMBOL "event" 6 1) next=(SPACE " " 6 6)
    into   rmSpaces accepted=(SYMBOL "event" 6 1) next=(SPACE " " 6 6)
  back into stack-language accepted=(SYMBOL "event" 6 1) next=(SPACE " " 6 6)
    into   rmSpaces accepted=(SPACE " " 6 6) next=(CHARACTER #\= 6 7)
  back into stack-language accepted=(CHARACTER #\= 6 7) next=(SPACE " " 6 8)
    into   rmSpaces accepted=(CHARACTER #\= 6 7) next=(SPACE " " 6 8)
  back into stack-language accepted=(CHARACTER #\= 6 7) next=(SPACE " " 6 8)
    into   rmSpaces accepted=(SPACE " " 6 8) next=(CHARACTER #\{ 6 9)
  back into stack-language accepted=(CHARACTER #\{ 6 9) next=(SPACE " " 6 10)
    into   rmSpaces accepted=(CHARACTER #\{ 6 9) next=(SPACE " " 6 10)
  back into stack-language accepted=(CHARACTER #\{ 6 9) next=(SPACE " " 6 10)
    into   rmSpaces accepted=(SPACE " " 6 10) next=(SYMBOL "onName" 6 11)
  back into stack-language accepted=(SYMBOL "onName" 6 11) next=(SPACE " " 6 17)
    into   rmSpaces accepted=(SYMBOL "onName" 6 11) next=(SPACE " " 6 17)
  back into stack-language accepted=(SYMBOL "onName" 6 11) next=(SPACE " " 6 17)
    into   rmSpaces accepted=(SPACE " " 6 17) next=(SYMBOL "statements" 6 18)
  back into stack-language accepted=(SYMBOL "statements" 6 18) next=(SPACE " " 6 28)
    into   rmSpaces accepted=(SYMBOL "statements" 6 18) next=(SPACE " " 6 28)
  back into stack-language accepted=(SYMBOL "statements" 6 18) next=(SPACE " " 6 28)
    into   rmSpaces accepted=(SPACE " " 6 28) next=(CHARACTER #\} 6 29)
  back into stack-language accepted=(CHARACTER #\} 6 29) next=(SPACE "
" 6 30)
    into   rmSpaces accepted=(CHARACTER #\} 6 29) next=(SPACE "
" 6 30)
  back into stack-language accepted=(CHARACTER #\} 6 29) next=(SPACE "
" 6 30)
    into   rmSpaces accepted=(SPACE "
" 6 30) next=(SYMBOL "onName" 7 1)
  back into stack-language accepted=(SYMBOL "onName" 7 1) next=(SPACE " " 7 7)
    into   rmSpaces accepted=(SYMBOL "onName" 7 1) next=(SPACE " " 7 7)
  back into stack-language accepted=(SYMBOL "onName" 7 1) next=(SPACE " " 7 7)
    into   rmSpaces accepted=(SPACE " " 7 7) next=(CHARACTER #\= 7 8)
  back into stack-language accepted=(CHARACTER #\= 7 8) next=(SPACE " " 7 9)
    into   rmSpaces accepted=(CHARACTER #\= 7 8) next=(SPACE " " 7 9)
  back into stack-language accepted=(CHARACTER #\= 7 8) next=(SPACE " " 7 9)
    into   rmSpaces accepted=(SPACE " " 7 9) next=(CHARACTER #\: 7 10)
  back into stack-language accepted=(CHARACTER #\: 7 10) next=(SYMBOL "string" 7 11)
    into   rmSpaces accepted=(CHARACTER #\: 7 10) next=(SYMBOL "string" 7 11)
  back into stack-language accepted=(SYMBOL "string" 7 11) next=(SPACE "

" 7 17)
    into   rmSpaces accepted=(SYMBOL "string" 7 11) next=(SPACE "

" 7 17)
  back into stack-language accepted=(SYMBOL "string" 7 11) next=(SPACE "

" 7 17)
    into   rmSpaces accepted=(SPACE "

" 7 17) next=(SYMBOL "statementsBlock" 9 1)
  back into stack-language accepted=(SYMBOL "statementsBlock" 9 1) next=(SPACE " " 9 16)
    into   rmSpaces accepted=(SYMBOL "statementsBlock" 9 1) next=(SPACE " " 9 16)
  back into stack-language accepted=(SYMBOL "statementsBlock" 9 1) next=(SPACE " " 9 16)
    into   rmSpaces accepted=(SPACE " " 9 16) next=(CHARACTER #\= 9 17)
  back into stack-language accepted=(CHARACTER #\= 9 17) next=(SPACE " " 9 18)
    into   rmSpaces accepted=(CHARACTER #\= 9 17) next=(SPACE " " 9 18)
  back into stack-language accepted=(CHARACTER #\= 9 17) next=(SPACE " " 9 18)
    into   rmSpaces accepted=(SPACE " " 9 18) next=(CHARACTER #\: 9 19)
  back into stack-language accepted=(CHARACTER #\: 9 19) next=(SYMBOL "bag" 9 20)
    into   rmSpaces accepted=(CHARACTER #\: 9 19) next=(SYMBOL "bag" 9 20)
  back into stack-language accepted=(SYMBOL "bag" 9 20) next=(SPACE " " 9 23)
    into   rmSpaces accepted=(SYMBOL "bag" 9 20) next=(SPACE " " 9 23)
  back into stack-language accepted=(SYMBOL "bag" 9 20) next=(SPACE " " 9 23)
    into   rmSpaces accepted=(SPACE " " 9 23) next=(SYMBOL "statement" 9 24)
  back into stack-language accepted=(SYMBOL "statement" 9 24) next=(SPACE "
" 9 33)
    into   rmSpaces accepted=(SYMBOL "statement" 9 24) next=(SPACE "
" 9 33)
  back into stack-language accepted=(SYMBOL "statement" 9 24) next=(SPACE "
" 9 33)
    into   rmSpaces accepted=(SPACE "
" 9 33) next=(SYMBOL "statement" 10 1)
  back into stack-language accepted=(SYMBOL "statement" 10 1) next=(SPACE " " 10 10)
    into   rmSpaces accepted=(SYMBOL "statement" 10 1) next=(SPACE " " 10 10)
  back into stack-language accepted=(SYMBOL "statement" 10 1) next=(SPACE " " 10 10)
    into   rmSpaces accepted=(SPACE " " 10 10) next=(CHARACTER #\= 10 11)
  back into stack-language accepted=(CHARACTER #\= 10 11) next=(SPACE " " 10 12)
    into   rmSpaces accepted=(CHARACTER #\= 10 11) next=(SPACE " " 10 12)
  back into stack-language accepted=(CHARACTER #\= 10 11) next=(SPACE " " 10 12)
    into   rmSpaces accepted=(SPACE " " 10 12) next=(CHARACTER #\| 10 13)
  back into stack-language accepted=(CHARACTER #\| 10 13) next=(SPACE " " 10 14)
    into   rmSpaces accepted=(CHARACTER #\| 10 13) next=(SPACE " " 10 14)
  back into stack-language accepted=(CHARACTER #\| 10 13) next=(SPACE " " 10 14)
    into   rmSpaces accepted=(SPACE " " 10 14) next=(SYMBOL "sendStatement" 10 15)
  back into stack-language accepted=(SYMBOL "sendStatement" 10 15) next=(SPACE " " 10 28)
    into   rmSpaces accepted=(SYMBOL "sendStatement" 10 15) next=(SPACE " " 10 28)
  back into stack-language accepted=(SYMBOL "sendStatement" 10 15) next=(SPACE " " 10 28)
    into   rmSpaces accepted=(SPACE " " 10 28) next=(CHARACTER #\| 10 29)
  back into stack-language accepted=(CHARACTER #\| 10 29) next=(SPACE " " 10 30)
    into   rmSpaces accepted=(CHARACTER #\| 10 29) next=(SPACE " " 10 30)
  back into stack-language accepted=(CHARACTER #\| 10 29) next=(SPACE " " 10 30)
    into   rmSpaces accepted=(SPACE " " 10 30) next=(SYMBOL "callStatement" 10 31)
  back into stack-language accepted=(SYMBOL "callStatement" 10 31) next=(SPACE "
" 10 44)
    into   rmSpaces accepted=(SYMBOL "callStatement" 10 31) next=(SPACE "
" 10 44)
  back into stack-language accepted=(SYMBOL "callStatement" 10 31) next=(SPACE "
" 10 44)
    into   rmSpaces accepted=(SPACE "
" 10 44) next=(SYMBOL "sendStatement" 11 1)
  back into stack-language accepted=(SYMBOL "sendStatement" 11 1) next=(SPACE " " 11 14)
    into   rmSpaces accepted=(SYMBOL "sendStatement" 11 1) next=(SPACE " " 11 14)
  back into stack-language accepted=(SYMBOL "sendStatement" 11 1) next=(SPACE " " 11 14)
    into   rmSpaces accepted=(SPACE " " 11 14) next=(CHARACTER #\= 11 15)
  back into stack-language accepted=(CHARACTER #\= 11 15) next=(SPACE " " 11 16)
    into   rmSpaces accepted=(CHARACTER #\= 11 15) next=(SPACE " " 11 16)
  back into stack-language accepted=(CHARACTER #\= 11 15) next=(SPACE " " 11 16)
    into   rmSpaces accepted=(SPACE " " 11 16) next=(CHARACTER #\{ 11 17)
  back into stack-language accepted=(CHARACTER #\{ 11 17) next=(SPACE " " 11 18)
    into   rmSpaces accepted=(CHARACTER #\{ 11 17) next=(SPACE " " 11 18)
  back into stack-language accepted=(CHARACTER #\{ 11 17) next=(SPACE " " 11 18)
    into   rmSpaces accepted=(SPACE " " 11 18) next=(SYMBOL "kind" 11 19)
  back into stack-language accepted=(SYMBOL "kind" 11 19) next=(CHARACTER #\= 11 23)
    into   rmSpaces accepted=(SYMBOL "kind" 11 19) next=(CHARACTER #\= 11 23)
  back into stack-language accepted=(CHARACTER #\= 11 23) next=(CHARACTER #\' 11 24)
    into   rmSpaces accepted=(CHARACTER #\= 11 23) next=(CHARACTER #\' 11 24)
  back into stack-language accepted=(CHARACTER #\' 11 24) next=(SYMBOL "send" 11 25)
    into   rmSpaces accepted=(CHARACTER #\' 11 24) next=(SYMBOL "send" 11 25)
  back into stack-language accepted=(SYMBOL "send" 11 25) next=(CHARACTER #\' 11 29)
    into   rmSpaces accepted=(SYMBOL "send" 11 25) next=(CHARACTER #\' 11 29)
  back into stack-language accepted=(CHARACTER #\' 11 29) next=(SPACE " " 11 30)
    into   rmSpaces accepted=(CHARACTER #\' 11 29) next=(SPACE " " 11 30)
  back into stack-language accepted=(CHARACTER #\' 11 29) next=(SPACE " " 11 30)
    into   rmSpaces accepted=(SPACE " " 11 30) next=(SYMBOL "expr" 11 31)
  back into stack-language accepted=(SYMBOL "expr" 11 31) next=(SPACE " " 11 35)
    into   rmSpaces accepted=(SYMBOL "expr" 11 31) next=(SPACE " " 11 35)
  back into stack-language accepted=(SYMBOL "expr" 11 31) next=(SPACE " " 11 35)
    into   rmSpaces accepted=(SPACE " " 11 35) next=(CHARACTER #\} 11 36)
  back into stack-language accepted=(CHARACTER #\} 11 36) next=(SPACE "
" 11 37)
    into   rmSpaces accepted=(CHARACTER #\} 11 36) next=(SPACE "
" 11 37)
  back into stack-language accepted=(CHARACTER #\} 11 36) next=(SPACE "
" 11 37)
    into   rmSpaces accepted=(SPACE "
" 11 37) next=(SYMBOL "callStatement" 12 1)
  back into stack-language accepted=(SYMBOL "callStatement" 12 1) next=(SPACE " " 12 14)
    into   rmSpaces accepted=(SYMBOL "callStatement" 12 1) next=(SPACE " " 12 14)
  back into stack-language accepted=(SYMBOL "callStatement" 12 1) next=(SPACE " " 12 14)
    into   rmSpaces accepted=(SPACE " " 12 14) next=(CHARACTER #\= 12 15)
  back into stack-language accepted=(CHARACTER #\= 12 15) next=(SPACE " " 12 16)
    into   rmSpaces accepted=(CHARACTER #\= 12 15) next=(SPACE " " 12 16)
  back into stack-language accepted=(CHARACTER #\= 12 15) next=(SPACE " " 12 16)
    into   rmSpaces accepted=(SPACE " " 12 16) next=(CHARACTER #\{ 12 17)
  back into stack-language accepted=(CHARACTER #\{ 12 17) next=(SPACE " " 12 18)
    into   rmSpaces accepted=(CHARACTER #\{ 12 17) next=(SPACE " " 12 18)
  back into stack-language accepted=(CHARACTER #\{ 12 17) next=(SPACE " " 12 18)
    into   rmSpaces accepted=(SPACE " " 12 18) next=(SYMBOL "kind" 12 19)
  back into stack-language accepted=(SYMBOL "kind" 12 19) next=(CHARACTER #\= 12 23)
    into   rmSpaces accepted=(SYMBOL "kind" 12 19) next=(CHARACTER #\= 12 23)
  back into stack-language accepted=(CHARACTER #\= 12 23) next=(CHARACTER #\' 12 24)
    into   rmSpaces accepted=(CHARACTER #\= 12 23) next=(CHARACTER #\' 12 24)
  back into stack-language accepted=(CHARACTER #\' 12 24) next=(SYMBOL "call" 12 25)
    into   rmSpaces accepted=(CHARACTER #\' 12 24) next=(SYMBOL "call" 12 25)
  back into stack-language accepted=(SYMBOL "call" 12 25) next=(CHARACTER #\' 12 29)
    into   rmSpaces accepted=(SYMBOL "call" 12 25) next=(CHARACTER #\' 12 29)
  back into stack-language accepted=(CHARACTER #\' 12 29) next=(SPACE " " 12 30)
    into   rmSpaces accepted=(CHARACTER #\' 12 29) next=(SPACE " " 12 30)
  back into stack-language accepted=(CHARACTER #\' 12 29) next=(SPACE " " 12 30)
    into   rmSpaces accepted=(SPACE " " 12 30) next=(SYMBOL "exprmap" 12 31)
  back into stack-language accepted=(SYMBOL "exprmap" 12 31) next=(SPACE " " 12 38)
    into   rmSpaces accepted=(SYMBOL "exprmap" 12 31) next=(SPACE " " 12 38)
  back into stack-language accepted=(SYMBOL "exprmap" 12 31) next=(SPACE " " 12 38)
    into   rmSpaces accepted=(SPACE " " 12 38) next=(CHARACTER #\} 12 39)
  back into stack-language accepted=(CHARACTER #\} 12 39) next=(SPACE "
" 12 40)
    into   rmSpaces accepted=(CHARACTER #\} 12 39) next=(SPACE "
" 12 40)
  back into stack-language accepted=(CHARACTER #\} 12 39) next=(SPACE "
" 12 40)
    into   rmSpaces accepted=(SPACE "
" 12 40) next=(SYMBOL "exprBlock" 13 1)
  back into stack-language accepted=(SYMBOL "exprBlock" 13 1) next=(SPACE " " 13 10)
    into   rmSpaces accepted=(SYMBOL "exprBlock" 13 1) next=(SPACE " " 13 10)
  back into stack-language accepted=(SYMBOL "exprBlock" 13 1) next=(SPACE " " 13 10)
    into   rmSpaces accepted=(SPACE " " 13 10) next=(CHARACTER #\= 13 11)
  back into stack-language accepted=(CHARACTER #\= 13 11) next=(SPACE " " 13 12)
    into   rmSpaces accepted=(CHARACTER #\= 13 11) next=(SPACE " " 13 12)
  back into stack-language accepted=(CHARACTER #\= 13 11) next=(SPACE " " 13 12)
    into   rmSpaces accepted=(SPACE " " 13 12) next=(CHARACTER #\: 13 13)
  back into stack-language accepted=(CHARACTER #\: 13 13) next=(SYMBOL "map" 13 14)
    into   rmSpaces accepted=(CHARACTER #\: 13 13) next=(SYMBOL "map" 13 14)
  back into stack-language accepted=(SYMBOL "map" 13 14) next=(SPACE " " 13 17)
    into   rmSpaces accepted=(SYMBOL "map" 13 14) next=(SPACE " " 13 17)
  back into stack-language accepted=(SYMBOL "map" 13 14) next=(SPACE " " 13 17)
    into   rmSpaces accepted=(SPACE " " 13 17) next=(SYMBOL "expr" 13 18)
  back into stack-language accepted=(SYMBOL "expr" 13 18) next=(SPACE "
" 13 22)
    into   rmSpaces accepted=(SYMBOL "expr" 13 18) next=(SPACE "
" 13 22)
  back into stack-language accepted=(SYMBOL "expr" 13 18) next=(SPACE "
" 13 22)
    into   rmSpaces accepted=(SPACE "
" 13 22) next=(SYMBOL "expr" 14 1)
  back into stack-language accepted=(SYMBOL "expr" 14 1) next=(SPACE " " 14 5)
    into   rmSpaces accepted=(SYMBOL "expr" 14 1) next=(SPACE " " 14 5)
  back into stack-language accepted=(SYMBOL "expr" 14 1) next=(SPACE " " 14 5)
    into   rmSpaces accepted=(SPACE " " 14 5) next=(CHARACTER #\= 14 6)
  back into stack-language accepted=(CHARACTER #\= 14 6) next=(SPACE " " 14 7)
    into   rmSpaces accepted=(CHARACTER #\= 14 6) next=(SPACE " " 14 7)
  back into stack-language accepted=(CHARACTER #\= 14 6) next=(SPACE " " 14 7)
    into   rmSpaces accepted=(SPACE " " 14 7) next=(CHARACTER #\| 14 8)
  back into stack-language accepted=(CHARACTER #\| 14 8) next=(SPACE " " 14 9)
    into   rmSpaces accepted=(CHARACTER #\| 14 8) next=(SPACE " " 14 9)
  back into stack-language accepted=(CHARACTER #\| 14 8) next=(SPACE " " 14 9)
    into   rmSpaces accepted=(SPACE " " 14 9) next=(SYMBOL "rawExpr" 14 10)
  back into stack-language accepted=(SYMBOL "rawExpr" 14 10) next=(SPACE " " 14 17)
    into   rmSpaces accepted=(SYMBOL "rawExpr" 14 10) next=(SPACE " " 14 17)
  back into stack-language accepted=(SYMBOL "rawExpr" 14 10) next=(SPACE " " 14 17)
    into   rmSpaces accepted=(SPACE " " 14 17) next=(CHARACTER #\| 14 18)
  back into stack-language accepted=(CHARACTER #\| 14 18) next=(SPACE " " 14 19)
    into   rmSpaces accepted=(CHARACTER #\| 14 18) next=(SPACE " " 14 19)
  back into stack-language accepted=(CHARACTER #\| 14 18) next=(SPACE " " 14 19)
    into   rmSpaces accepted=(SPACE " " 14 19) next=(SYMBOL "dollarExpr" 14 20)
  back into stack-language accepted=(SYMBOL "dollarExpr" 14 20) next=(SPACE " " 14 30)
    into   rmSpaces accepted=(SYMBOL "dollarExpr" 14 20) next=(SPACE " " 14 30)
  back into stack-language accepted=(SYMBOL "dollarExpr" 14 20) next=(SPACE " " 14 30)
    into   rmSpaces accepted=(SPACE " " 14 30) next=(CHARACTER #\| 14 31)
  back into stack-language accepted=(CHARACTER #\| 14 31) next=(SPACE " " 14 32)
    into   rmSpaces accepted=(CHARACTER #\| 14 31) next=(SPACE " " 14 32)
  back into stack-language accepted=(CHARACTER #\| 14 31) next=(SPACE " " 14 32)
    into   rmSpaces accepted=(SPACE " " 14 32) next=(SYMBOL "callExpr" 14 33)
  back into stack-language accepted=(SYMBOL "callExpr" 14 33) next=(SPACE "
" 14 41)
    into   rmSpaces accepted=(SYMBOL "callExpr" 14 33) next=(SPACE "
" 14 41)
  back into stack-language accepted=(SYMBOL "callExpr" 14 33) next=(SPACE "
" 14 41)
    into   rmSpaces accepted=(SPACE "
" 14 41) next=(SYMBOL "dollarExpr" 15 1)
  back into stack-language accepted=(SYMBOL "dollarExpr" 15 1) next=(SPACE " " 15 11)
    into   rmSpaces accepted=(SYMBOL "dollarExpr" 15 1) next=(SPACE " " 15 11)
  back into stack-language accepted=(SYMBOL "dollarExpr" 15 1) next=(SPACE " " 15 11)
    into   rmSpaces accepted=(SPACE " " 15 11) next=(CHARACTER #\= 15 12)
  back into stack-language accepted=(CHARACTER #\= 15 12) next=(SPACE " " 15 13)
    into   rmSpaces accepted=(CHARACTER #\= 15 12) next=(SPACE " " 15 13)
  back into stack-language accepted=(CHARACTER #\= 15 12) next=(SPACE " " 15 13)
    into   rmSpaces accepted=(SPACE " " 15 13) next=(CHARACTER #\{ 15 14)
  back into stack-language accepted=(CHARACTER #\{ 15 14) next=(SPACE " " 15 15)
    into   rmSpaces accepted=(CHARACTER #\{ 15 14) next=(SPACE " " 15 15)
  back into stack-language accepted=(CHARACTER #\{ 15 14) next=(SPACE " " 15 15)
    into   rmSpaces accepted=(SPACE " " 15 15) next=(SYMBOL "kind" 15 16)
  back into stack-language accepted=(SYMBOL "kind" 15 16) next=(CHARACTER #\= 15 20)
    into   rmSpaces accepted=(SYMBOL "kind" 15 16) next=(CHARACTER #\= 15 20)
  back into stack-language accepted=(CHARACTER #\= 15 20) next=(CHARACTER #\' 15 21)
    into   rmSpaces accepted=(CHARACTER #\= 15 20) next=(CHARACTER #\' 15 21)
  back into stack-language accepted=(CHARACTER #\' 15 21) next=(SYMBOL "dollar" 15 22)
    into   rmSpaces accepted=(CHARACTER #\' 15 21) next=(SYMBOL "dollar" 15 22)
  back into stack-language accepted=(SYMBOL "dollar" 15 22) next=(CHARACTER #\' 15 28)
    into   rmSpaces accepted=(SYMBOL "dollar" 15 22) next=(CHARACTER #\' 15 28)
  back into stack-language accepted=(CHARACTER #\' 15 28) next=(SPACE " " 15 29)
    into   rmSpaces accepted=(CHARACTER #\' 15 28) next=(SPACE " " 15 29)
  back into stack-language accepted=(CHARACTER #\' 15 28) next=(SPACE " " 15 29)
    into   rmSpaces accepted=(SPACE " " 15 29) next=(CHARACTER #\} 15 30)
  back into stack-language accepted=(CHARACTER #\} 15 30) next=(SPACE "
" 15 31)
    into   rmSpaces accepted=(CHARACTER #\} 15 30) next=(SPACE "
" 15 31)
  back into stack-language accepted=(CHARACTER #\} 15 30) next=(SPACE "
" 15 31)
    into   rmSpaces accepted=(SPACE "
" 15 31) next=(SYMBOL "callExpr" 16 1)
  back into stack-language accepted=(SYMBOL "callExpr" 16 1) next=(SPACE " " 16 9)
    into   rmSpaces accepted=(SYMBOL "callExpr" 16 1) next=(SPACE " " 16 9)
  back into stack-language accepted=(SYMBOL "callExpr" 16 1) next=(SPACE " " 16 9)
    into   rmSpaces accepted=(SPACE " " 16 9) next=(CHARACTER #\= 16 10)
  back into stack-language accepted=(CHARACTER #\= 16 10) next=(SPACE " " 16 11)
    into   rmSpaces accepted=(CHARACTER #\= 16 10) next=(SPACE " " 16 11)
  back into stack-language accepted=(CHARACTER #\= 16 10) next=(SPACE " " 16 11)
    into   rmSpaces accepted=(SPACE " " 16 11) next=(CHARACTER #\{ 16 12)
  back into stack-language accepted=(CHARACTER #\{ 16 12) next=(SPACE " " 16 13)
    into   rmSpaces accepted=(CHARACTER #\{ 16 12) next=(SPACE " " 16 13)
  back into stack-language accepted=(CHARACTER #\{ 16 12) next=(SPACE " " 16 13)
    into   rmSpaces accepted=(SPACE " " 16 13) next=(SYMBOL "kind" 16 14)
  back into stack-language accepted=(SYMBOL "kind" 16 14) next=(CHARACTER #\= 16 18)
    into   rmSpaces accepted=(SYMBOL "kind" 16 14) next=(CHARACTER #\= 16 18)
  back into stack-language accepted=(CHARACTER #\= 16 18) next=(CHARACTER #\' 16 19)
    into   rmSpaces accepted=(CHARACTER #\= 16 18) next=(CHARACTER #\' 16 19)
  back into stack-language accepted=(CHARACTER #\' 16 19) next=(SYMBOL "function" 16 20)
    into   rmSpaces accepted=(CHARACTER #\' 16 19) next=(SYMBOL "function" 16 20)
  back into stack-language accepted=(SYMBOL "function" 16 20) next=(CHARACTER #\' 16 28)
    into   rmSpaces accepted=(SYMBOL "function" 16 20) next=(CHARACTER #\' 16 28)
  back into stack-language accepted=(CHARACTER #\' 16 28) next=(SPACE " " 16 29)
    into   rmSpaces accepted=(CHARACTER #\' 16 28) next=(SPACE " " 16 29)
  back into stack-language accepted=(CHARACTER #\' 16 28) next=(SPACE " " 16 29)
    into   rmSpaces accepted=(SPACE " " 16 29) next=(SYMBOL "argmap" 16 30)
  back into stack-language accepted=(SYMBOL "argmap" 16 30) next=(SPACE " " 16 36)
    into   rmSpaces accepted=(SYMBOL "argmap" 16 30) next=(SPACE " " 16 36)
  back into stack-language accepted=(SYMBOL "argmap" 16 30) next=(SPACE " " 16 36)
    into   rmSpaces accepted=(SPACE " " 16 36) next=(CHARACTER #\} 16 37)
  back into stack-language accepted=(CHARACTER #\} 16 37) next=(SPACE "
" 16 38)
    into   rmSpaces accepted=(CHARACTER #\} 16 37) next=(SPACE "
" 16 38)
  back into stack-language accepted=(CHARACTER #\} 16 37) next=(SPACE "
" 16 38)
    into   rmSpaces accepted=(SPACE "
" 16 38) next=(SYMBOL "rawExpr" 17 1)
  back into stack-language accepted=(SYMBOL "rawExpr" 17 1) next=(SPACE " " 17 8)
    into   rmSpaces accepted=(SYMBOL "rawExpr" 17 1) next=(SPACE " " 17 8)
  back into stack-language accepted=(SYMBOL "rawExpr" 17 1) next=(SPACE " " 17 8)
    into   rmSpaces accepted=(SPACE " " 17 8) next=(CHARACTER #\= 17 9)
  back into stack-language accepted=(CHARACTER #\= 17 9) next=(SPACE " " 17 10)
    into   rmSpaces accepted=(CHARACTER #\= 17 9) next=(SPACE " " 17 10)
  back into stack-language accepted=(CHARACTER #\= 17 9) next=(SPACE " " 17 10)
    into   rmSpaces accepted=(SPACE " " 17 10) next=(CHARACTER #\{ 17 11)
  back into stack-language accepted=(CHARACTER #\{ 17 11) next=(SPACE " " 17 12)
    into   rmSpaces accepted=(CHARACTER #\{ 17 11) next=(SPACE " " 17 12)
  back into stack-language accepted=(CHARACTER #\{ 17 11) next=(SPACE " " 17 12)
    into   rmSpaces accepted=(SPACE " " 17 12) next=(SYMBOL "kind" 17 13)
  back into stack-language accepted=(SYMBOL "kind" 17 13) next=(CHARACTER #\= 17 17)
    into   rmSpaces accepted=(SYMBOL "kind" 17 13) next=(CHARACTER #\= 17 17)
  back into stack-language accepted=(CHARACTER #\= 17 17) next=(CHARACTER #\' 17 18)
    into   rmSpaces accepted=(CHARACTER #\= 17 17) next=(CHARACTER #\' 17 18)
  back into stack-language accepted=(CHARACTER #\' 17 18) next=(SYMBOL "raw" 17 19)
    into   rmSpaces accepted=(CHARACTER #\' 17 18) next=(SYMBOL "raw" 17 19)
  back into stack-language accepted=(SYMBOL "raw" 17 19) next=(CHARACTER #\' 17 22)
    into   rmSpaces accepted=(SYMBOL "raw" 17 19) next=(CHARACTER #\' 17 22)
  back into stack-language accepted=(CHARACTER #\' 17 22) next=(SPACE " " 17 23)
    into   rmSpaces accepted=(CHARACTER #\' 17 22) next=(SPACE " " 17 23)
  back into stack-language accepted=(CHARACTER #\' 17 22) next=(SPACE " " 17 23)
    into   rmSpaces accepted=(SPACE " " 17 23) next=(SYMBOL "rawText" 17 24)
  back into stack-language accepted=(SYMBOL "rawText" 17 24) next=(SPACE " " 17 31)
    into   rmSpaces accepted=(SYMBOL "rawText" 17 24) next=(SPACE " " 17 31)
  back into stack-language accepted=(SYMBOL "rawText" 17 24) next=(SPACE " " 17 31)
    into   rmSpaces accepted=(SPACE " " 17 31) next=(CHARACTER #\} 17 32)
  back into stack-language accepted=(CHARACTER #\} 17 32) next=(SPACE "
" 17 33)
    into   rmSpaces accepted=(CHARACTER #\} 17 32) next=(SPACE "
" 17 33)
  back into stack-language accepted=(CHARACTER #\} 17 32) next=(SPACE "
" 17 33)
    into   rmSpaces accepted=(SPACE "
" 17 33) next=(SYMBOL "rawText" 18 1)
  back into stack-language accepted=(SYMBOL "rawText" 18 1) next=(SPACE " " 18 8)
    into   rmSpaces accepted=(SYMBOL "rawText" 18 1) next=(SPACE " " 18 8)
  back into stack-language accepted=(SYMBOL "rawText" 18 1) next=(SPACE " " 18 8)
    into   rmSpaces accepted=(SPACE " " 18 8) next=(CHARACTER #\= 18 9)
  back into stack-language accepted=(CHARACTER #\= 18 9) next=(SPACE " " 18 10)
    into   rmSpaces accepted=(CHARACTER #\= 18 9) next=(SPACE " " 18 10)
  back into stack-language accepted=(CHARACTER #\= 18 9) next=(SPACE " " 18 10)
    into   rmSpaces accepted=(SPACE " " 18 10) next=(CHARACTER #\: 18 11)
  back into stack-language accepted=(CHARACTER #\: 18 11) next=(SYMBOL "string" 18 12)
    into   rmSpaces accepted=(CHARACTER #\: 18 11) next=(SYMBOL "string" 18 12)
  back into stack-language accepted=(SYMBOL "string" 18 12) next=(SPACE "
" 18 18)
    into   rmSpaces accepted=(SYMBOL "string" 18 12) next=(SPACE "
" 18 18)
  back into stack-language accepted=(SYMBOL "string" 18 12) next=(SPACE "
" 18 18)
    into   rmSpaces accepted=(SPACE "
" 18 18) next=(SYMBOL "name" 19 1)
  back into stack-language accepted=(SYMBOL "name" 19 1) next=(SPACE " " 19 5)
    into   rmSpaces accepted=(SYMBOL "name" 19 1) next=(SPACE " " 19 5)
  back into stack-language accepted=(SYMBOL "name" 19 1) next=(SPACE " " 19 5)
    into   rmSpaces accepted=(SPACE " " 19 5) next=(CHARACTER #\= 19 6)
  back into stack-language accepted=(CHARACTER #\= 19 6) next=(SPACE " " 19 7)
    into   rmSpaces accepted=(CHARACTER #\= 19 6) next=(SPACE " " 19 7)
  back into stack-language accepted=(CHARACTER #\= 19 6) next=(SPACE " " 19 7)
    into   rmSpaces accepted=(SPACE " " 19 7) next=(CHARACTER #\: 19 8)
  back into stack-language accepted=(CHARACTER #\: 19 8) next=(SYMBOL "string" 19 9)
    into   rmSpaces accepted=(CHARACTER #\: 19 8) next=(SYMBOL "string" 19 9)
  back into stack-language accepted=(SYMBOL "string" 19 9) next=(SPACE "


" 19 15)
    into   rmSpaces accepted=(SYMBOL "string" 19 9) next=(SPACE "


" 19 15)
  back into stack-language accepted=(SYMBOL "string" 19 9) next=(SPACE "


" 19 15)
    into   rmSpaces accepted=(SPACE "


" 19 15) next=(EOF #\Nul 22 1)
  back into stack-language accepted=(EOF #\Nul 22 1) next=(EOF "generated eof" 0 0)
    into   dsl-tail accepted=(CHARACTER #\= 1 19) next=(CHARACTER #\{ 1 21)
      into   classWithFields accepted=(CHARACTER #\= 1 19) next=(CHARACTER #\{ 1 21)
        into   fieldDefs accepted=(CHARACTER #\{ 1 21) next=(SYMBOL "name" 1 23)
          into   field accepted=(CHARACTER #\{ 1 21) next=(SYMBOL "name" 1 23)
            into   optionalInitializer accepted=(SYMBOL "name" 1 23) next=(SYMBOL "initiallyDescriptor" 1 28)
          back into field accepted=(SYMBOL "name" 1 23) next=(SYMBOL "initiallyDescriptor" 1 28)
        back into fieldDefs accepted=(SYMBOL "name" 1 23) next=(SYMBOL "initiallyDescriptor" 1 28)
          into   field accepted=(SYMBOL "name" 1 23) next=(SYMBOL "initiallyDescriptor" 1 28)
            into   optionalInitializer accepted=(SYMBOL "initiallyDescriptor" 1 28) next=(SYMBOL "states" 1 48)
          back into field accepted=(SYMBOL "initiallyDescriptor" 1 28) next=(SYMBOL "states" 1 48)
        back into fieldDefs accepted=(SYMBOL "initiallyDescriptor" 1 28) next=(SYMBOL "states" 1 48)
          into   field accepted=(SYMBOL "initiallyDescriptor" 1 28) next=(SYMBOL "states" 1 48)
            into   optionalInitializer accepted=(SYMBOL "states" 1 48) next=(CHARACTER #\} 1 55)
          back into field accepted=(SYMBOL "states" 1 48) next=(CHARACTER #\} 1 55)
        back into fieldDefs accepted=(SYMBOL "states" 1 48) next=(CHARACTER #\} 1 55)
      back into classWithFields accepted=(SYMBOL "states" 1 48) next=(CHARACTER #\} 1 55)
    back into dsl-tail accepted=(CHARACTER #\} 1 55) next=(SYMBOL "initiallyDescriptor" 2 1)
  back into stack-language accepted=(CHARACTER #\} 1 55) next=(SYMBOL "initiallyDescriptor" 2 1)
    into   dsl-tail accepted=(CHARACTER #\= 2 21) next=(CHARACTER #\: 2 23)
      into   colonTail accepted=(CHARACTER #\= 2 21) next=(CHARACTER #\: 2 23)
        into   bagDef accepted=(CHARACTER #\: 2 23) next=(SYMBOL "bag" 2 24)
      back into colonTail accepted=(SYMBOL "statement" 2 28) next=(SYMBOL "statesBlock" 3 1)
    back into dsl-tail accepted=(SYMBOL "statement" 2 28) next=(SYMBOL "statesBlock" 3 1)
  back into stack-language accepted=(SYMBOL "statement" 2 28) next=(SYMBOL "statesBlock" 3 1)
    into   dsl-tail accepted=(CHARACTER #\= 3 13) next=(CHARACTER #\: 3 15)
      into   colonTail accepted=(CHARACTER #\= 3 13) next=(CHARACTER #\: 3 15)
        into   bagDef accepted=(CHARACTER #\: 3 15) next=(SYMBOL "bag" 3 16)
      back into colonTail accepted=(SYMBOL "state" 3 20) next=(SYMBOL "state" 4 1)
    back into dsl-tail accepted=(SYMBOL "state" 3 20) next=(SYMBOL "state" 4 1)
  back into stack-language accepted=(SYMBOL "state" 3 20) next=(SYMBOL "state" 4 1)
    into   dsl-tail accepted=(CHARACTER #\= 4 7) next=(CHARACTER #\{ 4 9)
      into   classWithFields accepted=(CHARACTER #\= 4 7) next=(CHARACTER #\{ 4 9)
        into   fieldDefs accepted=(CHARACTER #\{ 4 9) next=(SYMBOL "name" 4 11)
          into   field accepted=(CHARACTER #\{ 4 9) next=(SYMBOL "name" 4 11)
            into   optionalInitializer accepted=(SYMBOL "name" 4 11) next=(SYMBOL "events" 4 16)
          back into field accepted=(SYMBOL "name" 4 11) next=(SYMBOL "events" 4 16)
        back into fieldDefs accepted=(SYMBOL "name" 4 11) next=(SYMBOL "events" 4 16)
          into   field accepted=(SYMBOL "name" 4 11) next=(SYMBOL "events" 4 16)
            into   optionalInitializer accepted=(SYMBOL "events" 4 16) next=(CHARACTER #\} 4 23)
          back into field accepted=(SYMBOL "events" 4 16) next=(CHARACTER #\} 4 23)
        back into fieldDefs accepted=(SYMBOL "events" 4 16) next=(CHARACTER #\} 4 23)
      back into classWithFields accepted=(SYMBOL "events" 4 16) next=(CHARACTER #\} 4 23)
    back into dsl-tail accepted=(CHARACTER #\} 4 23) next=(SYMBOL "eventsBlock" 5 1)
  back into stack-language accepted=(CHARACTER #\} 4 23) next=(SYMBOL "eventsBlock" 5 1)
    into   dsl-tail accepted=(CHARACTER #\= 5 13) next=(CHARACTER #\: 5 15)
      into   colonTail accepted=(CHARACTER #\= 5 13) next=(CHARACTER #\: 5 15)
        into   bagDef accepted=(CHARACTER #\: 5 15) next=(SYMBOL "bag" 5 16)
      back into colonTail accepted=(SYMBOL "event" 5 20) next=(SYMBOL "event" 6 1)
    back into dsl-tail accepted=(SYMBOL "event" 5 20) next=(SYMBOL "event" 6 1)
  back into stack-language accepted=(SYMBOL "event" 5 20) next=(SYMBOL "event" 6 1)
    into   dsl-tail accepted=(CHARACTER #\= 6 7) next=(CHARACTER #\{ 6 9)
      into   classWithFields accepted=(CHARACTER #\= 6 7) next=(CHARACTER #\{ 6 9)
        into   fieldDefs accepted=(CHARACTER #\{ 6 9) next=(SYMBOL "onName" 6 11)
          into   field accepted=(CHARACTER #\{ 6 9) next=(SYMBOL "onName" 6 11)
            into   optionalInitializer accepted=(SYMBOL "onName" 6 11) next=(SYMBOL "statements" 6 18)
          back into field accepted=(SYMBOL "onName" 6 11) next=(SYMBOL "statements" 6 18)
        back into fieldDefs accepted=(SYMBOL "onName" 6 11) next=(SYMBOL "statements" 6 18)
          into   field accepted=(SYMBOL "onName" 6 11) next=(SYMBOL "statements" 6 18)
            into   optionalInitializer accepted=(SYMBOL "statements" 6 18) next=(CHARACTER #\} 6 29)
          back into field accepted=(SYMBOL "statements" 6 18) next=(CHARACTER #\} 6 29)
        back into fieldDefs accepted=(SYMBOL "statements" 6 18) next=(CHARACTER #\} 6 29)
      back into classWithFields accepted=(SYMBOL "statements" 6 18) next=(CHARACTER #\} 6 29)
    back into dsl-tail accepted=(CHARACTER #\} 6 29) next=(SYMBOL "onName" 7 1)
  back into stack-language accepted=(CHARACTER #\} 6 29) next=(SYMBOL "onName" 7 1)
    into   dsl-tail accepted=(CHARACTER #\= 7 8) next=(CHARACTER #\: 7 10)
      into   colonTail accepted=(CHARACTER #\= 7 8) next=(CHARACTER #\: 7 10)
        into   stringDef accepted=(CHARACTER #\: 7 10) next=(SYMBOL "string" 7 11)
      back into colonTail accepted=(SYMBOL "string" 7 11) next=(SYMBOL "statementsBlock" 9 1)
    back into dsl-tail accepted=(SYMBOL "string" 7 11) next=(SYMBOL "statementsBlock" 9 1)
  back into stack-language accepted=(SYMBOL "string" 7 11) next=(SYMBOL "statementsBlock" 9 1)
    into   dsl-tail accepted=(CHARACTER #\= 9 17) next=(CHARACTER #\: 9 19)
      into   colonTail accepted=(CHARACTER #\= 9 17) next=(CHARACTER #\: 9 19)
        into   bagDef accepted=(CHARACTER #\: 9 19) next=(SYMBOL "bag" 9 20)
      back into colonTail accepted=(SYMBOL "statement" 9 24) next=(SYMBOL "statement" 10 1)
    back into dsl-tail accepted=(SYMBOL "statement" 9 24) next=(SYMBOL "statement" 10 1)
  back into stack-language accepted=(SYMBOL "statement" 9 24) next=(SYMBOL "statement" 10 1)
    into   dsl-tail accepted=(CHARACTER #\= 10 11) next=(CHARACTER #\| 10 13)
      into   orClass accepted=(CHARACTER #\= 10 11) next=(CHARACTER #\| 10 13)
    back into dsl-tail accepted=(SYMBOL "callStatement" 10 31) next=(SYMBOL "sendStatement" 11 1)
  back into stack-language accepted=(SYMBOL "callStatement" 10 31) next=(SYMBOL "sendStatement" 11 1)
    into   dsl-tail accepted=(CHARACTER #\= 11 15) next=(CHARACTER #\{ 11 17)
      into   classWithFields accepted=(CHARACTER #\= 11 15) next=(CHARACTER #\{ 11 17)
        into   fieldDefs accepted=(CHARACTER #\{ 11 17) next=(SYMBOL "kind" 11 19)
          into   field accepted=(CHARACTER #\{ 11 17) next=(SYMBOL "kind" 11 19)
            into   optionalInitializer accepted=(SYMBOL "kind" 11 19) next=(CHARACTER #\= 11 23)
          back into field accepted=(CHARACTER #\' 11 29) next=(SYMBOL "expr" 11 31)
        back into fieldDefs accepted=(CHARACTER #\' 11 29) next=(SYMBOL "expr" 11 31)
          into   field accepted=(CHARACTER #\' 11 29) next=(SYMBOL "expr" 11 31)
            into   optionalInitializer accepted=(SYMBOL "expr" 11 31) next=(CHARACTER #\} 11 36)
          back into field accepted=(SYMBOL "expr" 11 31) next=(CHARACTER #\} 11 36)
        back into fieldDefs accepted=(SYMBOL "expr" 11 31) next=(CHARACTER #\} 11 36)
      back into classWithFields accepted=(SYMBOL "expr" 11 31) next=(CHARACTER #\} 11 36)
    back into dsl-tail accepted=(CHARACTER #\} 11 36) next=(SYMBOL "callStatement" 12 1)
  back into stack-language accepted=(CHARACTER #\} 11 36) next=(SYMBOL "callStatement" 12 1)
    into   dsl-tail accepted=(CHARACTER #\= 12 15) next=(CHARACTER #\{ 12 17)
      into   classWithFields accepted=(CHARACTER #\= 12 15) next=(CHARACTER #\{ 12 17)
        into   fieldDefs accepted=(CHARACTER #\{ 12 17) next=(SYMBOL "kind" 12 19)
          into   field accepted=(CHARACTER #\{ 12 17) next=(SYMBOL "kind" 12 19)
            into   optionalInitializer accepted=(SYMBOL "kind" 12 19) next=(CHARACTER #\= 12 23)
          back into field accepted=(CHARACTER #\' 12 29) next=(SYMBOL "exprmap" 12 31)
        back into fieldDefs accepted=(CHARACTER #\' 12 29) next=(SYMBOL "exprmap" 12 31)
          into   field accepted=(CHARACTER #\' 12 29) next=(SYMBOL "exprmap" 12 31)
            into   optionalInitializer accepted=(SYMBOL "exprmap" 12 31) next=(CHARACTER #\} 12 39)
          back into field accepted=(SYMBOL "exprmap" 12 31) next=(CHARACTER #\} 12 39)
        back into fieldDefs accepted=(SYMBOL "exprmap" 12 31) next=(CHARACTER #\} 12 39)
      back into classWithFields accepted=(SYMBOL "exprmap" 12 31) next=(CHARACTER #\} 12 39)
    back into dsl-tail accepted=(CHARACTER #\} 12 39) next=(SYMBOL "exprBlock" 13 1)
  back into stack-language accepted=(CHARACTER #\} 12 39) next=(SYMBOL "exprBlock" 13 1)
    into   dsl-tail accepted=(CHARACTER #\= 13 11) next=(CHARACTER #\: 13 13)
      into   colonTail accepted=(CHARACTER #\= 13 11) next=(CHARACTER #\: 13 13)
        into   mapDef accepted=(CHARACTER #\: 13 13) next=(SYMBOL "map" 13 14)
      back into colonTail accepted=(SYMBOL "expr" 13 18) next=(SYMBOL "expr" 14 1)
    back into dsl-tail accepted=(SYMBOL "expr" 13 18) next=(SYMBOL "expr" 14 1)
  back into stack-language accepted=(SYMBOL "expr" 13 18) next=(SYMBOL "expr" 14 1)
    into   dsl-tail accepted=(CHARACTER #\= 14 6) next=(CHARACTER #\| 14 8)
      into   orClass accepted=(CHARACTER #\= 14 6) next=(CHARACTER #\| 14 8)
    back into dsl-tail accepted=(SYMBOL "callExpr" 14 33) next=(SYMBOL "dollarExpr" 15 1)
  back into stack-language accepted=(SYMBOL "callExpr" 14 33) next=(SYMBOL "dollarExpr" 15 1)
    into   dsl-tail accepted=(CHARACTER #\= 15 12) next=(CHARACTER #\{ 15 14)
      into   classWithFields accepted=(CHARACTER #\= 15 12) next=(CHARACTER #\{ 15 14)
        into   fieldDefs accepted=(CHARACTER #\{ 15 14) next=(SYMBOL "kind" 15 16)
          into   field accepted=(CHARACTER #\{ 15 14) next=(SYMBOL "kind" 15 16)
            into   optionalInitializer accepted=(SYMBOL "kind" 15 16) next=(CHARACTER #\= 15 20)
          back into field accepted=(CHARACTER #\' 15 28) next=(CHARACTER #\} 15 30)
        back into fieldDefs accepted=(CHARACTER #\' 15 28) next=(CHARACTER #\} 15 30)
      back into classWithFields accepted=(CHARACTER #\' 15 28) next=(CHARACTER #\} 15 30)
    back into dsl-tail accepted=(CHARACTER #\} 15 30) next=(SYMBOL "callExpr" 16 1)
  back into stack-language accepted=(CHARACTER #\} 15 30) next=(SYMBOL "callExpr" 16 1)
    into   dsl-tail accepted=(CHARACTER #\= 16 10) next=(CHARACTER #\{ 16 12)
      into   classWithFields accepted=(CHARACTER #\= 16 10) next=(CHARACTER #\{ 16 12)
        into   fieldDefs accepted=(CHARACTER #\{ 16 12) next=(SYMBOL "kind" 16 14)
          into   field accepted=(CHARACTER #\{ 16 12) next=(SYMBOL "kind" 16 14)
            into   optionalInitializer accepted=(SYMBOL "kind" 16 14) next=(CHARACTER #\= 16 18)
          back into field accepted=(CHARACTER #\' 16 28) next=(SYMBOL "argmap" 16 30)
        back into fieldDefs accepted=(CHARACTER #\' 16 28) next=(SYMBOL "argmap" 16 30)
          into   field accepted=(CHARACTER #\' 16 28) next=(SYMBOL "argmap" 16 30)
            into   optionalInitializer accepted=(SYMBOL "argmap" 16 30) next=(CHARACTER #\} 16 37)
          back into field accepted=(SYMBOL "argmap" 16 30) next=(CHARACTER #\} 16 37)
        back into fieldDefs accepted=(SYMBOL "argmap" 16 30) next=(CHARACTER #\} 16 37)
      back into classWithFields accepted=(SYMBOL "argmap" 16 30) next=(CHARACTER #\} 16 37)
    back into dsl-tail accepted=(CHARACTER #\} 16 37) next=(SYMBOL "rawExpr" 17 1)
  back into stack-language accepted=(CHARACTER #\} 16 37) next=(SYMBOL "rawExpr" 17 1)
    into   dsl-tail accepted=(CHARACTER #\= 17 9) next=(CHARACTER #\{ 17 11)
      into   classWithFields accepted=(CHARACTER #\= 17 9) next=(CHARACTER #\{ 17 11)
        into   fieldDefs accepted=(CHARACTER #\{ 17 11) next=(SYMBOL "kind" 17 13)
          into   field accepted=(CHARACTER #\{ 17 11) next=(SYMBOL "kind" 17 13)
            into   optionalInitializer accepted=(SYMBOL "kind" 17 13) next=(CHARACTER #\= 17 17)
          back into field accepted=(CHARACTER #\' 17 22) next=(SYMBOL "rawText" 17 24)
        back into fieldDefs accepted=(CHARACTER #\' 17 22) next=(SYMBOL "rawText" 17 24)
          into   field accepted=(CHARACTER #\' 17 22) next=(SYMBOL "rawText" 17 24)
            into   optionalInitializer accepted=(SYMBOL "rawText" 17 24) next=(CHARACTER #\} 17 32)
          back into field accepted=(SYMBOL "rawText" 17 24) next=(CHARACTER #\} 17 32)
        back into fieldDefs accepted=(SYMBOL "rawText" 17 24) next=(CHARACTER #\} 17 32)
      back into classWithFields accepted=(SYMBOL "rawText" 17 24) next=(CHARACTER #\} 17 32)
    back into dsl-tail accepted=(CHARACTER #\} 17 32) next=(SYMBOL "rawText" 18 1)
  back into stack-language accepted=(CHARACTER #\} 17 32) next=(SYMBOL "rawText" 18 1)
    into   dsl-tail accepted=(CHARACTER #\= 18 9) next=(CHARACTER #\: 18 11)
      into   colonTail accepted=(CHARACTER #\= 18 9) next=(CHARACTER #\: 18 11)
        into   stringDef accepted=(CHARACTER #\: 18 11) next=(SYMBOL "string" 18 12)
      back into colonTail accepted=(SYMBOL "string" 18 12) next=(SYMBOL "name" 19 1)
    back into dsl-tail accepted=(SYMBOL "string" 18 12) next=(SYMBOL "name" 19 1)
  back into stack-language accepted=(SYMBOL "string" 18 12) next=(SYMBOL "name" 19 1)
    into   dsl-tail accepted=(CHARACTER #\= 19 6) next=(CHARACTER #\: 19 8)
      into   colonTail accepted=(CHARACTER #\= 19 6) next=(CHARACTER #\: 19 8)
        into   stringDef accepted=(CHARACTER #\: 19 8) next=(SYMBOL "string" 19 9)
      back into colonTail accepted=(SYMBOL "string" 19 9) next=(EOF #\Nul 22 1)
    back into dsl-tail accepted=(SYMBOL "string" 19 9) next=(EOF #\Nul 22 1)
  back into stack-language accepted=(SYMBOL "string" 19 9) next=(EOF #\Nul 22 1)
back into optionalInitializer accepted=(EOF #\Nul 22 1) next=(EOF "generated eof" 0 0)
#+end_example

  
