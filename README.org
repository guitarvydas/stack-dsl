* intro
  Simple stack language - two stacks, in the environment, for every defined type.
* DSL
  id = { ... }     --> class with fields def
  id = :bag ...    --> bag def
  id = :string ... --> string def
  id = :map ...    --> map def
  id = | ...       --> or type def

  See dsl.lisp

* generate
#+name: stack-dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*~")
 (ql:quickload :stack-dsl/generate)
#+end_src

#+name: stack-dsl
#+begin_src lisp :results output
 #| generate stack-dsl.lisp from stack.dsl (+ dsl.pasm) |#
 (stack-dsl::generate)
#+end_src

#+RESULTS: stack-dsl
: To load "stack-dsl/use":
:   Load 1 ASDF system:
:     stack-dsl/use
: ; Loading "stack-dsl/use"
: 

* use
#+name: stack-dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*~")
#+end_src

#+name: stack-dsl
#+begin_src lisp :results output
  #| check that it can be loaded |#
 (ql:quickload :stack-dsl/use)
#+end_src
